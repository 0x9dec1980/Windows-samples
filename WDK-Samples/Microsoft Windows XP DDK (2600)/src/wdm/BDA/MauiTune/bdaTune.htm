<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1252">
<META NAME="Generator" CONTENT="Microsoft Word 97">
<TITLE>BDA Tuner Driver</TITLE>
<META NAME="Template" CONTENT="C:\PROGRAM FILES\MICROSOFT OFFICE\OFFICE\html.dot">
 </head><body topmargin="0">
 

<FONT FACE="Verdana"><H2><A NAME="MYSAMPLE">BDA Tuner Driver</A> </H2>

<P><span style="color:#FF0000;font-size:10pt;font-family:Arial">[This is preliminary documentation and subject to change.]</span></P>

<H3>SUMMARY</H3></FONT><FONT FACE="Verdana" SIZE=2><P>
This sample is the source code for a Broadcast Driver Architecture (BDA) tuner driver<!-- for Windows&#174; 2000-->. It is provided as an example of a BDA device minidriver for the AVStream class of kernel streaming.  Use the BDA tuner driver with a Philips tuner card.<P>

<H3>BUILDING THE SAMPLE</H3></FONT><FONT FACE="Verdana" SIZE=2><P>
To build the sample, open a DDK command window, change to the BDA directory, and use the <B>build</B> command. Before you can use the sample, you need to install the Philips tuner card. 
<P>
To install the tuner card, shut down the computer, insert the tuner card, and boot. The operating system uses the PhilTune.inf file to detect and install the tuner card.<P>

After the tuner card is installed, the built sample, Philtune.sys, is in the %SystemRoot%\System32\Drivers directory of the operating system.<P>

<!--Plug and Play and Power Management are not implemented in Philtune.sys. <P> -->

Building this sample produces one file: Philtune.sys. Both free and checked versions are buildable.<P>

<H3>TOOLS</H3></FONT><FONT FACE="Verdana" SIZE=2><P>
The BDA network provider filter uses the BDA tuner driver to configure a filter in a filter graph. This filter is used to tune and demodulate a digital signal. Other filters in the filter graph capture video frames and present the video on the display.<P>

<H3>RESOURCES</H3></FONT><FONT FACE="Verdana" SIZE=2><P>
To get a logo for your device, consult the <A HREF="http://www.microsoft.com/hwtest">WHQL Web site</a> for information and test suites.<P>
Your device should support Plug and Play. Download Plug and Play specs from their <A HREF="http://www.microsoft.com/hwdev/respec/pnpspecs.htm">Web site</A>.<P>

<H3>CODE TOUR</H3>
<H4>File Manifest</H4>
</FONT><U><PRE>File&#9;&#9;	Description
</U>
Antenna.cpp&#9;	Implements the class for the input Antenna pin
Ari.cpp&#9;		Implements the ARI-chip properties of the device class 
Bdadebug.h&#9;	Contains macros that the driver uses for debugging
Bdaguid.c&#9;	Includes header files used for defining GUIDs
Bdatune.htm&#9;	The documentation for this sample (this file)
Common.h&#9;	Includes necessary header files, like Bdasup.h
DevCaps.cpp&#9;	Contains data specific to hardware
Device.cpp&#9;	Main code of BDA device, including driver-entry point
Filter.cpp&#9;	Implements methods of the filter class 
FiltProp.cpp&#9;	Implements properties of the filter class 
Gpio.cpp&#9;	Implements the GPIO class 
Gpio.h&#9;		Defines GPIO class
I2Script.cpp&#9;	Implements the class for the Inter-IC (I2C) bus that is used 
			to connect integrated circuits (ICs) on the card
I2Script.h&#9;	Defines structure for the I2C bus
Ksvsb.h&#9;		Defines constants and structures for VSB 
			that are also used in user mode
Makefile&#9;	The makefile for the project; do not edit.
Medguid.h&#9;	Contains definitions of medium GUIDs 
Mpoc.cpp&#9;	Implements the MPOC-chip properties of the device class 
Mpoc.h&#9;		Defines constants and structures for MPOC chip
ObjDesc.cpp&#9;	Defines automation and dispatch tables and 
			template structures
PhilTune.h&#9;	Defines classes for filter, device, and filter I/O pins
PhilTune.inf&#9;	Installation information for the sample
PhilTune.rc&#9;	Version information resource
Sources&#9;		DDK build instructions
Trnsport.cpp&#9;	Implements the class for the output Transport pin
Tuneprop.cpp&#9;	Implements the tuner-chip properties of the device class
Tuner.cpp&#9;	Implements the tuner class -- Sets up the tuner node
Tuner.h&#9;		Defines tuner class
Tunerdef.h&#9;	Defines tuner constants and structures
Util.cpp&#9;	Implements supporting functions
Util.h&#9;		Defines supporting functions
Vsb.h&#9;		Defines constants and structures for VSB 
Vsb1.cpp&#9;	Implements the VSBDemod1 class -- Sets the demodulator node
Vsb1.h&#9;		Defines the VSBDemod1 class 
Vsb2.cpp&#9;	Implements the VSBDemod2 class -- Sets the demodulator node
Vsb2.h&#9;		Defines the VSBDemod2 class 
Vsbbase.cpp&#9;	Implements the VSBDemod class -- Sets the demodulator node
Vsbbase.h&#9;	Defines the VSBDemod class 
Vsbdef.h&#9;	Defines more constants and structures for VSB 
Vsbprop.cpp&#9;	Implements the VSB properties of the device class
Wdmcommon.h&#9;	Defines constants and structures that are common to WDM
Wdmdebug.h&#9;	Contains macros for WDM debugging
Wdmdrv.h&#9;	Defines constants and structures for a WDM driver

</PRE></FONT><FONT FACE="Verdana"><H4>Programming Tour</H4></FONT><FONT FACE="Verdana" SIZE=2><P>
The ObjDesc.cpp file contains definitions and templates that the network provider filter uses to determine topology, to configure and change a filter instance, and to manipulate tuner and demodultor nodes. The BDA tuner driver registers these definitions and templates with the BDA support library so the library can handle most aspects of these operations. Other files of this sample define constants, structures, and classes and implement methods for those classes. <P>
</FONT><P ALIGN="CENTER"><A HREF="#top"><FONT FACE="Verdana" SIZE=2>Top of page</FONT></A><FONT FACE="Verdana" SIZE=2> </P></FONT>
<TABLE CELLSPACING=0 BORDER=0 WIDTH=624>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff" HEIGHT=2>
<P></TD>
</TR>
</TABLE>

<FONT FACE="MS Sans Serif" SIZE=1><P>&copy; 2000 Microsoft Corporation</FONT><FONT FACE="Verdana" SIZE=2> </P></FONT></BODY>
</HTML>
