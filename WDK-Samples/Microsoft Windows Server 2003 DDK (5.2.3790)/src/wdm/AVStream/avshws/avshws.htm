<HTML><HEAD><TITLE>AVSHwS: AVStream Simulated Hardware Sample Driver</TITLE>
<META content="text/html; charset=windows-1252" http-equiv=Content-Type>
<META content="MSHTML 5.00.2314.1000" name=GENERATOR></HEAD>
<BODY link=#0000ff><FONT face=Verdana size=5>
<H2>AVSHwS: AVStream Simulated Hardware Sample Driver </H2></FONT><FONT face=Verdana size=2>
<P><SPAN style="COLOR: #ff0000; FONT-FAMILY: Arial; FONT-SIZE: 10pt">[This is 
preliminary documentation and subject to change.]</SPAN></P>
<H3>SUMMARY</H3></FONT><FONT face=Verdana size=2>
<P>

The AVSHwS sample provides a pin-centric AVStream capture driver for a simulated piece of hardware.
 



The driver performs captures at 320x240 in either an RGB24 or YUV422 format via direct DMA into capture 
buffers.  The purpose of the sample is to demonstrate how to write a pin-centric AVStream minidriver.
The sample also shows how to implement DMA by using the related functionality
provided by AVStream. 


<p>


</FONT><FONT face=Verdana size=2>


<p>
<H3>BUILDING THE SAMPLE</H3></FONT><FONT face=Verdana size=2>
<P>

Build the sample by typing <B>build -zc</B> in either the standard checked or free build
environment. A successful build produces <i>avshws.sys.</i> 
To install the driver, right click on <i>avshws.inf</i> and select Install.
When prompted for <i>avshws.sys</i>, select the built binary.<p>



The sample works on x86 platforms and builds 
correctly using Microsoft&#174; Visual C&#174; 6.0. The driver uses Plug and Play. 
<P> 
This sample runs on Microsoft®  Windows XP®, and Windows Server 2003® or any platform 
Windows 98® gold or beyond, including Windows 2000®, that 
has DirectX 8.0 or beyond installed.<p>
<H3>PROGRAMMING TOUR</H3></FONT><FONT face=Verdana size=2>
<P>

<b>DriverEntry</b> in <i>device.cpp</i> is the initial point of entry.  This routine passes control to
AVStream through a call to <b>KsInitializeDriver</b>.  In this call, the minidriver passes the device descriptor, 
an AVStream structure that
recursively defines the AVStream object hierarchy for a driver.

This is common behavior for an AVStream minidriver.
<p>

At device start time (see the <b>CcaptureDevice::PnpStart</b> method in <i>device.cpp</i>), a simulated piece 
of capture hardware
is created (the ChardwareSimulation class), a DMA adapter is acquired from the operating system and is
registered with AVStream through a call to <b>KsDeviceRegisterAdapterObject</b>.  This call is required for a sample that
performs DMA directly into the capture buffers, instead of using DMA to write to a common buffer.
<p>
<i>Filter.cpp</i> is where the sample lays out the KSPIN_DESCRIPTOR_EX structure for the single capture pin.
In addition,
a KSFILTER_DISPATCH structure and a KSFILTER_DESCRIPTOR structure are provided in this source file.
The filter dispatch provides only a create dispatch, a routine
that is included in <i>Filter.cpp</i>.  The process dispatch is provided on the pin, since
this is a pin-centric sample.

<p>
<i>Capture.cpp</i> contains source for the video capture pin 
on the capture filter.  This is where the    

KSPIN_DISPATCH structure for the unique pin is provided. This dispatch structure specifies a Process callback routine,
also defined in this source file. This routine is where stream pointer manipulation and cloning occurs.

<p>
The process callback is one of two routines of interest in <i>Capture.cpp</i> that demonstrate how to 
do DMA transfers using AVStream functionality.
The other is
<b>CCapturePin::CompleteMappings</b>.  These two methods show how to use the queue, obtain clone pointers, use
scatter/gather lists, and perform other DMA-related tasks.
<p>

<i>Hwsim.cpp</i> contains the hardware simulation code and also code that fills the scatter/gather
mappings.  This source file includes the Start, Pause and Stop methods for the hardware simulation
 class (CHardwaresimulation).

Image synthesis and overlay code is also here.  The supplied objects provide image
synthesis (pixel, color-bar, etc...) to RGB24 and UYVY buffers as
well as software string overlay into these buffers.

The <i>Image.cpp</i> file, including data, must exist in locked segments.
<p>

See comments in all .cpp files.  Also see complete AVStream documentation in the DDK documentation.


<p>
<H3>RUNNING THE SAMPLE</H3></FONT><FONT face=Verdana size=2>
<p>
Once installation is
complete, access the driver through the graphedt tool. <i>Graphedt.exe</i> is available
in the <i>Tools</i> directory of the DDK.
In the Graphedt application, click the Graph menu and select Insert Filters.  
The sample appears under "WDM Streaming Capture Devices"
as "avshws Source."  
Click Insert Filter and the sample appears in the graph as a single filter labelled as avshws Source.
Attach this filter to either a DirectShow Video Renderer or the VMR default video renderer and click Play.

<p>

The output produced by the sample is a 320x240 image of standard EIA-189-A color bars.
In the middle of the image near the bottom, a clock appears over the image.  This clock
displays the elapsed time since the graph was introduced into the run state following the last stop.
The clock shows

	MINUTES:SECONDS.HUNDREDTHS.
<p>
In the top left corner of the image, a counter counts the number of frames that have been
dropped since the graph was introduced into the run state after the last stop.

<p>
<H3>COMMENTS</H3></FONT><FONT face=Verdana size=2>
For more information on AVStream, see the DDK documentation.


<P>
<H3>CODE TOUR</H3>
<H4>File Manifest</H4></FONT><U><PRE>File</U>		<U>Description
</U>
avshws.htm&#9;The Sample Tour documentation for this sample (this file).
Sources&#9;	The generic file for building the code sample.
avshws.inf&#9;A sample installation file.
avshws.h&#9;The main header file for the sample.
device.cpp&#9;DriverEntry, Plug and Play handling, initialization, device level code.
device.h&#9;Header file for above.
filter.cpp&#9;Filter level code for the capture filter.
filter.h&#9;Header file for above.
capture.cpp&#9;Pin level code for the capture pin, DMA handling.
capture.h&#9;Header file for above.
hwsim.cpp&#9;Hardware simulation code, filling scatter/gather mappings, etc.
hwsim.h&#9;	Header file for above.
image.cpp&#9;RGB24 and UYVY image synthesis and overlay code.
image.h&#9;	Header file for above.
avshws.rc&#9;Resource file mainly for version.


</FONT>
<TABLE border=0 cellSpacing=0 width=624><TBODY><TR><TD bgColor=#00ffff height=2 vAlign=center><P></P></TD></TR></TBODY></TABLE>

<FONT face="MS Sans Serif" size=1><P>© 2001 Microsoft Corporation</FONT><FONT face=Verdana size=2> </P></FONT>
</PRE></BODY></HTML>

